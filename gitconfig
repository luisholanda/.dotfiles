[user]
	email = luiscmholanda@gmail.com
	name = Luis Holanda
	signingkey = DA2223669494475C
[core]
	excludesfile = /Users/luiscm/.dotfiles/gitignore
	#fsmonitor = rs-git-fsmonitor
	commentChar = @
[commit]
	template = /Users/luiscm/.stCommitMsg
	gpgsign = true
[credential]
	helper = osxkeychain
[gpg]
	program = gpg2
[color]
	ui = true
[branch]
	autosetuprebase = always
[alias]
  # ammend to a specified commit.
  fixup = "!f() { TARGET=$(git rev-parse \"$1\"); git commit --fixup=$TARGET && GIT_EDITOR=true git rebase --interactive --autosquash $TARGET~; }; f"
  # list all aliases
  aliases = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"
  # list all tagss
  tags = tag -n1 --list
  # list all stashes
  stashes = stash list
  fuck = !"git add :/*; git cane; git sync -f"

  ### status ###

  # status with short format instead of full details
  ss = status --short

  # status with short format and showing branch and tracking info.
  ssb = status --short --branch

  ### branches ###
  # list all branches, fetched remotes included.
  branches = branch -a
  # create a new branch.
  nb = checkout -b
  # checkout to a branch.
  ch = checkout

  ### sync ###
  sync = !git push origin "$(git rev-parse --abbrev-ref HEAD)"
  update-with-base = !"git pull origin develop --rebase && git push origin \"$(git rev-parse --abbrev-ref HEAD)\" --force"
  upwb = update-with-base

  ### cherry-pick ###
  cp = cherry-pick
  cpc = cherry-pick --continue
  cpa = cherry-pick --abort

  ### commit ###

  # commit with blank message to be rebased latter.
  cb = "commit -m \"chore: blank\""

  # commit - amend the tip of the current branch rather than creating a new commit.
  ca = commit --amend

  # commit - amend the tip of the current branch, and edit the message.
  cam = commit --amend --message

  # commit - amend the tip of the current branch, and do not edit the message.
  cane = commit --amend --no-edit

  # commit interactive
  ci = commit --interactive

  # commit with a message
  cm = commit --message

  # commit with a message
  co = commit

  ### diff ###

  # diff - show changes not yet staged
  dc = !"git diff --cached"

  # diff - show changes about to be commited
  ds = !"git diff --staged"

  # diff - show changes but by word, not line
  dw = !"git diff --word-diff"

  # diff deep - show changes with our preferred options. Also aliased as `diff-deep`.
  dd = diff --check --dirstat --find-copies --find-renames --histogram --color

  ### log ###

  # log with a text-based graphical representation of the commit history.
  lg = log --graph

  # log with one line per item.
  lo = log --oneline

  # log with patch generation.
  lp = log --patch

  # log with first parent, useful for team branch that only accepts pull requests
  lfp = log --first-parent

  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.
  lt = log --topo-order

  # log like - we like this summarization our key performance indicators. Also aliased as `log-like`.
  ll = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'

  # log like long  - we like this summarization our key performance indicators. Also aliased as `log-like-long`.
  lll = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --abbrev=40 --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'

  ### rebase ###

  # rebase - forward-port local commits to the updated upstream head.
  rb = rebase

  # iterative rebases using the provided number of commits.
  rbi = !git rebase --interactive

  # rebase abort - cancel the rebasing process
  rba = rebase --abort

  # rebase - continue the rebasing process after resolving a conflict manually and updating the index with the resolution.
  rbc = rebase --continue

  # rebase - restart the rebasing process by skipping the current patch.
  rbs = rebase --skip

  # Stash aliases for push & pop
  #
  # Note that if you are using an older version of git, before 2.16.0,
  # then you can use the older "stash save" instead of the newer "stash push".
  save = stash push
  pop = stash pop
  snapshot = !git stash push "snapshot: $(date)" && git stash apply "stash@{0}"

  # pruner: prune everything that is unreachable now.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # This is useful for removing unreachable objects from all places.
  #
  # By [CodeGnome](http://www.codegnome.com/)
  #
  pruner = !"git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all; git fetch --prune"

  # repacker: repack a repo the way Linus recommends.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # It does the equivalent of "git gc --aggressive"
  # but done *properly*,  which is to do something like:
  #
  #     git repack -a -d --depth=250 --window=250
  #
  # The depth setting is about how deep the delta chains can be;
  # make them longer for old history - it's worth the space overhead.
  #
  # The window setting is about how big an object window we want
  # each delta candidate to scan.
  #
  # And here, you might well want to add the "-f" flag (which is
  # the "drop all old deltas", since you now are actually trying
  # to make sure that this one actually finds good candidates.
  #
  # And then it's going to take forever and a day (ie a "do it overnight"
  # thing). But the end result is that everybody downstream from that
  # repository will get much better packs, without having to spend any effort
  # on it themselves.
  #
  # http://metalinguist.wordpress.com/2007/12/06/the-woes-of-git-gc-aggressive-and-how-git-deltas-work/
  #
  # We also add the --window-memory limit of 1 gig, which helps protect
  # us from a window that has very large objects such as binary blobs.
  #
  repacker = repack -a -d -f --depth=300 --window=300 --window-memory=1g
  # Do everything we can to optimize the repository.
  #
  # This command takes a long time to run, perhaps even overnight.
  #
  # Currently, this command simply calls `git pruner` and `git repacker`.
  # There's a step that may be unnecessarying, calling `git prune-pack`.
  #
  optimize = !"git pruner; git repacker"

  #### Pull Requests ####

  prc = !gh pr create -w
  pcr = !gh pr create -w
  prv = !gh pr view -w
